#!/usr/bin/env swift

import Foundation
import Cocoa

print("üîç TERMINAL SIZE ISSUE ANALYSIS")
print("===============================")

// ANALYSIS: The issue is that flexible_position with 100% width/height
// generates correct LLM output but only applies position (0,0) and ignores size (100,100)

print("\n1. EXECUTION FLOW ANALYSIS:")
print("   LLM generates: flexible_position(app_name: 'Terminal', x_position: '0', y_position: '0', width: '100', height: '100')")
print("   ‚Üì")
print("   ToolToCommandConverter.convertFlexiblePosition() converts percentages to pixels")
print("   ‚Üì")
print("   WindowCommand created with action: .move, position: .precise, customSize: CGSize, customPosition: CGPoint")
print("   ‚Üì")
print("   WindowPositioner.moveWindow() called")
print("   ‚Üì")
print("   Checks: if command.position == .precise && customSize != nil ‚Üí TRUE")
print("   ‚Üì")
print("   Calls: windowManager.setWindowBounds(window, bounds: CGRect(origin: position, size: customSize))")

print("\n2. POTENTIAL FAILURE POINTS:")
print("   A. ToolToCommandConverter.convertFlexiblePosition() - percentage parsing")
print("   B. WindowPositioner.moveWindow() - condition check")
print("   C. WindowManager.setWindowBounds() - bounds validation")
print("   D. WindowManager.setWindowBounds() - AX API calls")
print("   E. App-specific constraints overriding size")

print("\n3. DEEP DIVE INTO setWindowBounds():")
print("   func setWindowBounds(_ windowInfo: WindowInfo, bounds: CGRect, validate: Bool = true) -> Bool {")
print("       // Step 1: Validate bounds (might clip size)")
print("       let finalBounds = validate ? validateWindowBounds(bounds, for: windowInfo.appName) : bounds")
print("       ")
print("       // Step 2: Create AX values")
print("       let positionValue = AXValueCreate(.cgPoint, ...)")
print("       let sizeValue = AXValueCreate(.cgSize, ...)")
print("       ")
print("       // Step 3: Apply both position and size")
print("       let positionResult = AXUIElementSetAttributeValue(windowRef, kAXPositionAttribute, positionValue)")
print("       let sizeResult = AXUIElementSetAttributeValue(windowRef, kAXSizeAttribute, sizeValue)")
print("       ")
print("       return positionResult == .success && sizeResult == .success")
print("   }")

print("\n4. BOUNDS VALIDATION ANALYSIS:")
print("   validateWindowBounds() in WindowManager.swift:")
print("   - Gets screen bounds using getVisibleScreenBounds()")
print("   - Clamps position to screen bounds")
print("   - Should NOT modify size (DYNAMIC SYSTEM comment)")
print("   - But position clamping might affect final bounds")

print("\n5. HYPOTHESIS - MOST LIKELY CAUSES:")
print("   üéØ PRIMARY SUSPECT: AX API sizeResult failure")
print("      - Position succeeds (window moves to 0,0)")
print("      - Size fails silently (window keeps current size)")
print("      - setWindowBounds() returns true due to AND logic bug")
print("   ")
print("   üéØ SECONDARY SUSPECT: App-specific size constraints")
print("      - Terminal might have minimum/maximum size limits")
print("      - Size gets clamped to app constraints")
print("      - Position still applies normally")

print("\n6. DEBUGGING STRATEGY:")
print("   1. Add detailed logging to setWindowBounds():")
print("      - Log input bounds")
print("      - Log validated bounds")
print("      - Log positionResult and sizeResult separately")
print("      - Log final return value")
print("   ")
print("   2. Test with validate=false:")
print("      - Bypass bounds validation")
print("      - See if size application improves")
print("   ")
print("   3. Test different size values:")
print("      - Try 90% instead of 100%")
print("      - Try specific pixel values")
print("      - Test with different apps")
print("   ")
print("   4. Check Terminal's AX attributes:")
print("      - Does Terminal support kAXSizeAttribute?")
print("      - Are there size constraints?")
print("      - Is window resizable?")

print("\n7. LIKELY FIX LOCATIONS:")
print("   üìç WindowManager.setWindowBounds() - Add separate return logic")
print("   üìç WindowManager.setWindowBounds() - Add retry logic for size")
print("   üìç WindowPositioner.moveWindow() - Add size validation before calling")
print("   üìç Add app-specific size handling for Terminal")

print("\n8. IMMEDIATE TESTING RECOMMENDATIONS:")
print("   ‚úÖ Test 1: Log both positionResult and sizeResult")
print("   ‚úÖ Test 2: Call setWindowBounds with validate=false")
print("   ‚úÖ Test 3: Try moveWindow() then resizeWindow() separately")
print("   ‚úÖ Test 4: Test with different percentages (90%, 80%)")
print("   ‚úÖ Test 5: Test with other apps (Arc, Cursor)")

print("\n9. COORDINATE SYSTEM CHECK:")
let screen = NSScreen.main?.visibleFrame ?? CGRect.zero
print("   Current screen visibleFrame: \(screen)")
print("   100% width would be: \(screen.width)")
print("   100% height would be: \(screen.height)")
print("   Expected bounds: \(CGRect(x: 0, y: 0, width: screen.width, height: screen.height))")

print("\n10. CONCLUSION:")
print("    The issue is most likely in WindowManager.setWindowBounds()")
print("    where the AX API call for size is failing silently")
print("    while the position call succeeds.")
print("    ")
print("    NEXT STEPS:")
print("    1. Add detailed logging to setWindowBounds()")
print("    2. Test with validate=false parameter") 
print("    3. Consider separate moveWindow() + resizeWindow() calls")
print("    4. Add app-specific size handling for Terminal")

print("\n‚úÖ ANALYSIS COMPLETE")